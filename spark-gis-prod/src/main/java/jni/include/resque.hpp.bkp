#include <vector>
#include <string>

#include "gis.hpp"
#include "statistics.h"
#include "resquecommon.h"
					     
//class Resque{

//private:

// string tile_id;
// string prev_id;
// //vector<id_type> hits;
// map<int, vector<Geometry*> > polydata;
// map<int, vector<string> > rawdata;
  
// WKTReader *wkt_reader;
// ISpatialIndex * spidx;
// IStorageManager * storage;
// Jacc_object_cal * jacc_cal;
// Dice_object_cal * dice_cal;
  
// bool appendstats = false;
// bool appendTileID = false;
// double area1 = -1;
// double area2 = -1;
// vector<double> stat_report;

// Geometry *extra_poly = NULL;
// vector<string> extra_fields;
// int extra_sid = -1;

// void init();
// void print_stop();
// void releaseShapeMem(const int k );
// bool buildIndex(map<int,Geometry*> & geom_polygons);
// bool join_with_predicate(const Geometry * geom1 , const Geometry * geom2, 
// 			   const Envelope * env1, const Envelope * env2,
// 			   const int jp);
// string project( vector<string> & fields, int sid);
// void setProjectionParam(char * arg);
// int getJoinPredicate(const char * predicate_str);
// string ReportResult(int i, int j);

// void populate_polygon(Geometry *poly, int sid, vector<string> fields);
//public:
void Resque(string predicate, int geomid1, int geomid2); 
//  void populate(string input_line);
bool populate(string input_line);
void populate_extra();
void reset();
vector<string> join_bucket();
//~Resque();

// friend void swap(Resque& first, Resque& second) // nothrow
// {
// // enable ADL (not necessary in our case, but good practice)
// using std::swap; 

// // by swapping the members of two classes,
// // the two classes are effectively swapped
// swap(first.tile_id, second.tile_id); 
// swap(first.prev_id, second.prev_id); 
// swap(first.polydata, second.polydata); 
// swap(first.rawdata, second.rawdata); 
// swap(first.wkt_reader, second.wkt_reader); 
// swap(first.spidx, second.spidx); 
// swap(first.storage, second.storage); 
// swap(first.jacc_cal, second.jacc_cal); 
// swap(first.dice_cal, second.dice_cal); 
// swap(first.appendstats, second.appendstats); 
// swap(first.appendTileID, second.appendTileID); 
// swap(first.area1, second.area1); 
// swap(first.area2, second.area2); 
// swap(first.stat_report, second.stat_report); 
// swap(first.extra_poly, second.extra_poly); 
// swap(first.extra_fields, second.extra_fields); 
// swap(first.extra_sid, second.extra_sid); 

// }
// Resque& operator=(Resque other)
// {
//     swap(*this, other);
//     return *this;
// }


//};
